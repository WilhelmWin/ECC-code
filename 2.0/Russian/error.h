#ifndef ERROR_H          // Защитная конструкция, чтобы предотвратить множественное включение
#define ERROR_H

// ========================================================================
// Библиотеки
// ========================================================================
#include "session.h"     // Включает определение ClientServerContext,
// используется для управления сокетами

#ifdef _WIN32
#include <winsock2.h>    // Для программирования сокетов в Windows (Winsock2)
#include <windows.h>     // Для специфичных типов Windows и обработки сигналов
#else
#include <signal.h>      // Для sigaction, siginfo_t и констант сигналов в Unix/Linux
#endif


// ========================================================================
// Функции обработки ошибок
// ========================================================================

// Функция для обработки общей фатальной ошибки:
// - Выводит сообщение об ошибке
// - Очищает Winsock на Windows, если необходимо
// - Завершает программу с кодом 1
void error(char *msg);

// Функция для обработки ошибки, связанной с сервером:
// - Принимает сообщение и два дескриптора сокетов
// - Закрывает оба сокета, если они валидны
// - Выполняет очистку (например, WSACleanup в Windows)
// - Завершает программу
void error_server(const char *msg, int sockfd, int newsockfd);


// ========================================================================
// Обработка сигналов Ctrl+Z / Ctrl+C
// ========================================================================

#ifdef _WIN32
// Регистрирует обработчик сигналов в Windows для перехвата Ctrl+C или событий закрытия
// - Принимает указатель на ClientServerContext, чтобы знать какие сокеты закрывать
void register_signal_handler(ClientServerContext *ctx);
#else
// Обработчик сигналов для Unix/Linux систем:
// - Получает метаданные сигнала
// - Извлекает контекст сокета из siginfo_t
// - Закрывает серверный сокет и завершает программу
void handle_signal(int sig, siginfo_t *si, void *ucontext);
#endif


#ifdef _WIN32
// Регистрирует консольный обработчик сигналов Windows.
// Должен вызываться при инициализации клиента с корректным указателем на контекст.
void setup_signal_handler(ClientServerContext *ctx);
#else
// Функция обработчика сигналов для Unix/Linux систем.
// Должна регистрироваться через sigaction, передавая контекст через sigqueue или глобальную переменную.
void handle_signal_client(int sig, siginfo_t *si, void *ucontext);
#endif


#endif // ERROR_H  // Конец защитной конструкции
