#ifndef CONSTANTS_H_
#define CONSTANTS_H_

#include <stdint.h>
#include "ascon.h"
#include "word.h"

// Варианты шифра ASCON: определяет, какой вариант AEAD используется.
// В данном случае установлен на 1.
#define ASCON_AEAD_VARIANT 1

// Размеры шифра ASCON:
// Размер аутентификационного тега (в байтах) установлен на 16 байт.
#define ASCON_TAG_SIZE 16

// Рейтинг шифрования ASCON 128A: количество байт, которое шифруется
// за один раз.
#define ASCON_128A_RATE 16

// Количество раундов для различных операций шифрования ASCON:
// Количество раундов для пермутации PA.
#define ASCON_PA_ROUNDS 12
// Количество раундов для пермутации PB (для шифра ASCON 128A).
#define ASCON_128A_PB_ROUNDS 8

// Инициализационный вектор (IV) для шифра ASCON 128A.
// IV строится с использованием нескольких параметров, таких как:
// - вариант AEAD
// - количество раундов пермутации PA
// - количество раундов пермутации PB
// - размер тега
// - ставка шифрования

// Формирование битового поля для параметров варианта AEAD:
// - 8 бит для варианта AEAD
// - 8 бит для количества раундов перестановки PA
// - 4 бита для количества раундов перестановки PB
// - 8 бит для размера тега (умноженного на 8 для перевода в биты)
// - 8 бит для скорости шифрования
#define ASCON_128A_IV                           \
  (((uint64_t)(ASCON_AEAD_VARIANT)      << 0)\
  | ((uint64_t)(ASCON_PA_ROUNDS)        << 16)\
  | ((uint64_t)(ASCON_128A_PB_ROUNDS)   << 20)\
  | ((uint64_t)(ASCON_TAG_SIZE * 8)     << 24)\
  | ((uint64_t)(ASCON_128A_RATE)        << 40))\

// =====================================================================
// API для работы с шифрованием и аутентификацией
// =====================================================================

// Размер криптографического ключа в байтах. Установлен на 16 байт.
#define CRYPTO_KEYBYTES 16

// Размер аутентификационного тега в байтах. Установлен на 16 байт.
#define CRYPTO_ABYTES 16

// =====================================================================
// Пермутации для обработки состояния шифра ASCON
// =====================================================================

// Пермутация P12: Применяет 12 раундов к состоянию шифра ASCON.
// Каждый раунд обрабатывает состояние с использованием различных
// параметров, таких как целевая маска для изменения состояния.
// Функция ROUND вызывается с различными параметрами, в зависимости от
// раунда.
static inline void P12(ascon_state_t* s) {
  ROUND(s, 0xf0);  // Первый раунд с маской 0xf0
  ROUND(s, 0xe1);  // Второй раунд с маской 0xe1
  ROUND(s, 0xd2);  // Третий раунд с маской 0xd2
  ROUND(s, 0xc3);  // Четвертый раунд с маской 0xc3
  ROUND(s, 0xb4);  // Пятый раунд с маской 0xb4
  ROUND(s, 0xa5);  // Шестой раунд с маской 0xa5
  ROUND(s, 0x96);  // Седьмой раунд с маской 0x96
  ROUND(s, 0x87);  // Восьмой раунд с маской 0x87
  ROUND(s, 0x78);  // Девятый раунд с маской 0x78
  ROUND(s, 0x69);  // Десятый раунд с маской 0x69
  ROUND(s, 0x5a);  // Одиннадцатый раунд с маской 0x5a
  ROUND(s, 0x4b);  // Двенадцатый раунд с маской 0x4b
}

// Пермутация P8: Применяет 8 раундов к состоянию шифра ASCON.
// Эта версия пермутации имеет меньше раундов, чем P12, и используется,
// например, в некоторых вариантах шифра ASCON.
static inline void P8(ascon_state_t* s) {
  ROUND(s, 0xb4);  // Первый раунд с маской 0xb4
  ROUND(s, 0xa5);  // Второй раунд с маской 0xa5
  ROUND(s, 0x96);  // Третий раунд с маской 0x96
  ROUND(s, 0x87);  // Четвертый раунд с маской 0x87
  ROUND(s, 0x78);  // Пятый раунд с маской 0x78
  ROUND(s, 0x69);  // Шестой раунд с маской 0x69
  ROUND(s, 0x5a);  // Седьмой раунд с маской 0x5a
  ROUND(s, 0x4b);  // Восьмой раунд с маской 0x4b
}

// Пермутация P6: Применяет 6 раундов к состоянию шифра ASCON.
// Еще одна разновидность пермутации с меньшим количеством раундов,
// которая применяется в определенных ситуациях.
static inline void P6(ascon_state_t* s) {
  ROUND(s, 0x96);  // Первый раунд с маской 0x96
  ROUND(s, 0x87);  // Второй раунд с маской 0x87
  ROUND(s, 0x78);  // Третий раунд с маской 0x78
  ROUND(s, 0x69);  // Четвертый раунд с маской 0x69
  ROUND(s, 0x5a);  // Пятый раунд с маской 0x5a
  ROUND(s, 0x4b);  // Шестой раунд с маской 0x4b
}

#endif /* CONSTANTS_H_ */
